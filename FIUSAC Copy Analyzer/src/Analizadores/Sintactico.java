
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\006\000\002\003" +
    "\007\000\002\003\010\000\002\003\010\000\002\005\007" +
    "\000\002\005\007\000\002\005\010\000\002\005\010\000" +
    "\002\006\006\000\002\006\007\000\002\006\006\000\002" +
    "\006\007\000\002\006\006\000\002\006\007\000\002\006" +
    "\010\000\002\006\007\000\002\006\007\000\002\006\010" +
    "\000\002\006\007\000\002\006\010\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\011\003\000\002\004" +
    "\006\000\002\004\006\000\002\017\010\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\003\000" +
    "\002\015\003\000\002\020\010\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\003\000\002\016" +
    "\003\000\002\012\006\000\002\012\006\000\002\013\006" +
    "\000\002\013\006\000\002\014\006\000\002\014\006\000" +
    "\002\021\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\005\005\001\002\000\004\002\221\001" +
    "\002\000\004\026\006\001\002\000\006\004\011\037\010" +
    "\001\002\000\004\004\214\001\002\000\004\034\206\001" +
    "\002\000\004\026\014\001\002\000\004\027\013\001\002" +
    "\000\004\002\000\001\002\000\006\006\017\007\016\001" +
    "\002\000\010\006\032\007\031\027\030\001\002\000\004" +
    "\031\024\001\002\000\004\031\020\001\002\000\004\030" +
    "\021\001\002\000\004\032\022\001\002\000\004\021\023" +
    "\001\002\000\010\006\ufffc\007\ufffc\027\ufffc\001\002\000" +
    "\004\030\025\001\002\000\004\033\026\001\002\000\004" +
    "\021\027\001\002\000\010\006\ufffb\007\ufffb\027\ufffb\001" +
    "\002\000\012\010\047\016\044\017\045\037\010\001\002" +
    "\000\004\031\037\001\002\000\004\031\033\001\002\000" +
    "\004\030\034\001\002\000\004\032\035\001\002\000\004" +
    "\021\036\001\002\000\010\006\ufffa\007\ufffa\027\ufffa\001" +
    "\002\000\004\030\040\001\002\000\004\033\041\001\002" +
    "\000\004\021\042\001\002\000\010\006\ufff9\007\ufff9\027" +
    "\ufff9\001\002\000\010\010\047\016\044\017\045\001\002" +
    "\000\004\026\201\001\002\000\004\026\175\001\002\000" +
    "\012\010\140\016\136\017\137\027\uffff\001\002\000\004" +
    "\026\050\001\002\000\014\011\061\012\056\013\063\014" +
    "\062\015\060\001\002\000\016\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\027\uffe5\001\002\000\016\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\027\uffe3\001\002\000\016" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\027\uffe4\001" +
    "\002\000\016\011\061\012\056\013\063\014\062\015\060" +
    "\027\134\001\002\000\016\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\027\uffe6\001\002\000\004\022\115\001\002" +
    "\000\016\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\027" +
    "\uffe7\001\002\000\004\022\110\001\002\000\004\022\103" +
    "\001\002\000\004\022\076\001\002\000\004\022\064\001" +
    "\002\000\004\024\065\001\002\000\006\031\067\033\066" +
    "\001\002\000\012\023\uffcc\025\uffcc\031\uffcc\033\uffcc\001" +
    "\002\000\012\023\uffcb\025\uffcb\031\uffcb\033\uffcb\001\002" +
    "\000\012\023\074\025\072\031\073\033\071\001\002\000" +
    "\012\023\uffcf\025\uffcf\031\uffcf\033\uffcf\001\002\000\004" +
    "\021\075\001\002\000\012\023\uffce\025\uffce\031\uffce\033" +
    "\uffce\001\002\000\012\023\uffcd\025\uffcd\031\uffcd\033\uffcd" +
    "\001\002\000\016\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\027\uffd0\001\002\000\006\031\100\032\077\001\002" +
    "\000\004\021\102\001\002\000\004\021\101\001\002\000" +
    "\016\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\027\uffca" +
    "\001\002\000\016\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\027\uffc9\001\002\000\006\031\105\032\104\001\002" +
    "\000\004\021\107\001\002\000\004\021\106\001\002\000" +
    "\020\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\020\uffd8" +
    "\027\uffd8\001\002\000\020\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\020\uffd7\027\uffd7\001\002\000\006\031\112" +
    "\032\111\001\002\000\004\021\114\001\002\000\004\021" +
    "\113\001\002\000\016\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\027\uffc8\001\002\000\016\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\027\uffc7\001\002\000\004\024\116" +
    "\001\002\000\006\031\120\032\117\001\002\000\012\023" +
    "\uffd2\025\uffd2\031\uffd2\032\uffd2\001\002\000\012\023\uffd1" +
    "\025\uffd1\031\uffd1\032\uffd1\001\002\000\012\023\125\025" +
    "\122\031\124\032\123\001\002\000\004\021\126\001\002" +
    "\000\012\023\uffd5\025\uffd5\031\uffd5\032\uffd5\001\002\000" +
    "\012\023\uffd4\025\uffd4\031\uffd4\032\uffd4\001\002\000\012" +
    "\023\uffd3\025\uffd3\031\uffd3\032\uffd3\001\002\000\016\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\027\uffd6\001\002" +
    "\000\016\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\027" +
    "\uffea\001\002\000\016\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\027\uffe8\001\002\000\016\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\027\uffe9\001\002\000\016\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\027\uffeb\001\002\000" +
    "\016\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\027\uffec" +
    "\001\002\000\014\010\ufff8\016\ufff8\017\ufff8\027\ufff8\037" +
    "\010\001\002\000\012\010\ufff7\016\ufff7\017\ufff7\027\ufff7" +
    "\001\002\000\004\026\163\001\002\000\004\026\145\001" +
    "\002\000\004\026\141\001\002\000\014\011\061\012\056" +
    "\013\063\014\062\015\060\001\002\000\016\011\061\012" +
    "\056\013\063\014\062\015\060\027\143\001\002\000\014" +
    "\010\ufff1\016\ufff1\017\ufff1\027\ufff1\037\010\001\002\000" +
    "\012\010\ufff2\016\ufff2\017\ufff2\027\ufff2\001\002\000\006" +
    "\011\061\020\147\001\002\000\010\011\uffda\020\uffda\027" +
    "\uffda\001\002\000\004\022\156\001\002\000\010\011\uffd9" +
    "\020\uffd9\027\uffd9\001\002\000\010\011\061\020\147\027" +
    "\154\001\002\000\010\011\uffdc\020\uffdc\027\uffdc\001\002" +
    "\000\010\011\uffdb\020\uffdb\027\uffdb\001\002\000\014\010" +
    "\uffee\016\uffee\017\uffee\027\uffee\037\010\001\002\000\012" +
    "\010\uffed\016\uffed\017\uffed\027\uffed\001\002\000\006\031" +
    "\160\032\157\001\002\000\004\021\162\001\002\000\004" +
    "\021\161\001\002\000\010\011\uffc6\020\uffc6\027\uffc6\001" +
    "\002\000\010\011\uffc5\020\uffc5\027\uffc5\001\002\000\010" +
    "\011\061\012\056\013\063\001\002\000\012\011\061\012" +
    "\056\013\063\027\172\001\002\000\012\011\uffdf\012\uffdf" +
    "\013\uffdf\027\uffdf\001\002\000\012\011\uffde\012\uffde\013" +
    "\uffde\027\uffde\001\002\000\012\011\uffdd\012\uffdd\013\uffdd" +
    "\027\uffdd\001\002\000\012\011\uffe2\012\uffe2\013\uffe2\027" +
    "\uffe2\001\002\000\012\011\uffe1\012\uffe1\013\uffe1\027\uffe1" +
    "\001\002\000\014\010\ufff0\016\ufff0\017\ufff0\027\ufff0\037" +
    "\010\001\002\000\012\011\uffe0\012\uffe0\013\uffe0\027\uffe0" +
    "\001\002\000\012\010\uffef\016\uffef\017\uffef\027\uffef\001" +
    "\002\000\006\011\061\020\147\001\002\000\010\011\061" +
    "\020\147\027\177\001\002\000\014\010\ufff4\016\ufff4\017" +
    "\ufff4\027\ufff4\037\010\001\002\000\012\010\ufff3\016\ufff3" +
    "\017\ufff3\027\ufff3\001\002\000\010\011\061\012\056\013" +
    "\063\001\002\000\012\011\061\012\056\013\063\027\203" +
    "\001\002\000\014\010\ufff6\016\ufff6\017\ufff6\027\ufff6\037" +
    "\010\001\002\000\012\010\ufff5\016\ufff5\017\ufff5\027\ufff5" +
    "\001\002\000\012\010\140\016\136\017\137\027\ufffd\001" +
    "\002\000\004\032\207\001\002\000\004\023\210\001\002" +
    "\000\004\032\211\001\002\000\004\035\212\001\002\000" +
    "\004\021\213\001\002\000\014\004\uffc4\010\uffc4\016\uffc4" +
    "\017\uffc4\027\uffc4\001\002\000\004\026\215\001\002\000" +
    "\006\006\017\007\016\001\002\000\010\006\032\007\031" +
    "\027\217\001\002\000\010\010\047\016\044\017\045\001" +
    "\002\000\012\010\140\016\136\017\137\027\ufffe\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\011\021\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\045\021\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\056\007" +
    "\053\012\052\013\051\017\054\020\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\132\012\130\013\127\017\131\020\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\056\007\141\012\052\013" +
    "\051\017\054\020\050\001\001\000\014\004\132\012\130" +
    "\013\127\017\131\020\126\001\001\000\004\021\143\001" +
    "\001\000\002\001\001\000\010\004\145\011\150\014\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\151\014\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\164\010" +
    "\163\017\165\020\166\001\001\000\010\004\167\017\170" +
    "\020\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\145\011\175\014\147\001\001\000\006\004\151" +
    "\014\152\001\001\000\004\021\177\001\001\000\002\001" +
    "\001\000\012\004\164\010\201\017\165\020\166\001\001" +
    "\000\010\004\167\017\170\020\172\001\001\000\004\021" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\215\001\001\000\002\001\001\000\004\006" +
    "\217\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String Resulto = "";
    private Symbol s;
    public ArrayList<NodoVariable> ListaVariables = new ArrayList();
    public ArrayList<NodoGrafica> GraficasEjecutar = new ArrayList();
    public ArrayList<String> Ejes = new ArrayList();
    public ArrayList<String> Direcciones = new ArrayList();
    public ArrayList<String> valores = new ArrayList();
    public NodoGrafica graficabarras = new NodoGrafica();
    public NodoGrafica graficapie = new NodoGrafica();
    public NodoGrafica graficalineas = new NodoGrafica();

    public void error_sintax(Symbol s){
        this.s = s;
    }
    
    public Symbol getS(){
        return this.s;
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= BPGRE BPLLAIZQ contenidogeneral BPLLADER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // contenidogeneral ::= BPDEG BPLLAIZQ cuerpo BPLLADER graficas 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contenidogeneral ::= compara BPDEG BPLLAIZQ cuerpo BPLLADER graficas 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenidogeneral ::= BPDEG BPLLAIZQ cuerpo BPLLADER compara graficas 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= BPSTG IDENTIFICADOR BPEQUAL BPCADENA BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= BPDOUBLE IDENTIFICADOR BPEQUAL DD BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= cuerpo BPSTG IDENTIFICADOR BPEQUAL BPCADENA BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= cuerpo BPDOUBLE IDENTIFICADOR BPEQUAL DD BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficas ::= BPGBARRAS BPLLAIZQ datosgraficabarra BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficabarras.tipo=var1;
                                                                GraficasEjecutar.add(graficabarras);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficas ::= BPGBARRAS BPLLAIZQ datosgraficabarra BPLLADER compara 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		graficabarras.tipo=var1;
                                                                GraficasEjecutar.add(graficabarras);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficas ::= BPGPIE BPLLAIZQ datosgraficapie BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficapie.tipo=var1;
                                                                GraficasEjecutar.add(graficapie);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficas ::= BPGPIE BPLLAIZQ datosgraficapie BPLLADER compara 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		graficapie.tipo=var1;
                                                                GraficasEjecutar.add(graficapie);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficas ::= BPGLINEAS BPLLAIZQ datosgraficalineal BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficalineas.tipo=var1;
                                                                GraficasEjecutar.add(graficalineas);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficas ::= BPGLINEAS BPLLAIZQ datosgraficalineal BPLLADER compara 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		graficalineas.tipo=var1;
                                                                GraficasEjecutar.add(graficalineas);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // graficas ::= graficas BPGBARRAS BPLLAIZQ datosgraficabarra BPLLADER compara 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		graficabarras.tipo=var1;
                                                                           GraficasEjecutar.add(graficabarras);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // graficas ::= graficas BPGBARRAS BPLLAIZQ datosgraficabarra BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficabarras.tipo=var1;
                                                                           GraficasEjecutar.add(graficabarras);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // graficas ::= graficas BPGPIE BPLLAIZQ datosgraficapie BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficapie.tipo=var1;
                                                                GraficasEjecutar.add(graficapie);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // graficas ::= graficas BPGPIE BPLLAIZQ datosgraficapie BPLLADER compara 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		graficapie.tipo=var1;
                                                                GraficasEjecutar.add(graficapie);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // graficas ::= graficas BPGLINEAS BPLLAIZQ datosgraficalineal BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficalineas.tipo=var1;
                                                                GraficasEjecutar.add(graficalineas);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // graficas ::= graficas BPGLINEAS BPLLAIZQ datosgraficalineal BPLLADER compara 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		graficalineas.tipo=var1;
                                                                GraficasEjecutar.add(graficalineas);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // datosgraficabarra ::= datosgraficabarra titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datosgraficabarra ::= datosgraficabarra ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datosgraficabarra ::= datosgraficabarra valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datosgraficabarra ::= datosgraficabarra titulox 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // datosgraficabarra ::= datosgraficabarra tituloy 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Tituloy=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // datosgraficabarra ::= titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // datosgraficabarra ::= ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // datosgraficabarra ::= valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // datosgraficabarra ::= titulox 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // datosgraficabarra ::= tituloy 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Tituloy=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // datosgraficapie ::= datosgraficapie titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // datosgraficapie ::= datosgraficapie ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // datosgraficapie ::= datosgraficapie valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // datosgraficapie ::= titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // datosgraficapie ::= ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // datosgraficapie ::= valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // datosgraficalineal ::= datosgraficalineal titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // datosgraficalineal ::= datosgraficalineal Arch 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // datosgraficalineal ::= titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // datosgraficalineal ::= Arch 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // titulos ::= BPTITULO BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // titulos ::= BPTITULO BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ejesx ::= BPEJEX BPDOSPUNTOS BPCORIZQ contenidox BPCORDER BPPTCOMA 
            {
              ArrayList<String> RESULT =null;
		RESULT=Ejes;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ejesx",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // contenidox ::= contenidox BPCADENA 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenidox ::= contenidox IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contenidox ::= contenidox BPCOMA 
            {
              ArrayList<String> RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenidox ::= BPCADENA 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenidox ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valores ::= BPVALORES BPDOSPUNTOS BPCORIZQ contenidov BPCORDER BPPTCOMA 
            {
              ArrayList<String> RESULT =null;
		RESULT=valores;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenidov ::= contenidov DD 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add((String) var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenidov ::= contenidov IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add( var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenidov ::= contenidov BPCOMA 
            {
              ArrayList<String> RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenidov ::= DD 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add((String) var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenidov ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add( var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // titulox ::= BPTTX BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // titulox ::= BPTTX BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tituloy ::= BPTTY BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tituloy ::= BPTTY BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Arch ::= BPARCHIVO BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arch",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Arch ::= BPARCHIVO BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arch",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // compara ::= BPCOMPARE BPPAA BPCADENA BPCOMA BPCADENA BPPAC BPPTCOMA 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		Direcciones.add(var1); Direcciones.add(var2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("compara",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
