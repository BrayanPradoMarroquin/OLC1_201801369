
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\006\000\002\003" +
    "\007\000\002\003\010\000\002\003\010\000\002\005\007" +
    "\000\002\005\007\000\002\005\010\000\002\005\010\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\007\000\002\006\007\000\002\006\007\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\004" +
    "\000\002\011\004\000\002\011\003\000\002\011\003\000" +
    "\002\004\006\000\002\004\006\000\002\020\010\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\003\000\002\016\003\000\002\021\010\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\003\000" +
    "\002\017\003\000\002\013\006\000\002\013\006\000\002" +
    "\014\006\000\002\014\006\000\002\015\006\000\002\015" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\005\005\001\002\000\004\002\204\001" +
    "\002\000\004\026\006\001\002\000\006\004\010\037\007" +
    "\001\002\000\004\004\177\001\002\000\004\026\013\001" +
    "\002\000\004\027\012\001\002\000\004\002\000\001\002" +
    "\000\006\006\016\007\015\001\002\000\010\006\031\007" +
    "\030\027\027\001\002\000\004\031\023\001\002\000\004" +
    "\031\017\001\002\000\004\030\020\001\002\000\004\032" +
    "\021\001\002\000\004\021\022\001\002\000\010\006\ufffc" +
    "\007\ufffc\027\ufffc\001\002\000\004\030\024\001\002\000" +
    "\004\033\025\001\002\000\004\021\026\001\002\000\010" +
    "\006\ufffb\007\ufffb\027\ufffb\001\002\000\012\010\046\016" +
    "\042\017\043\037\045\001\002\000\004\031\036\001\002" +
    "\000\004\031\032\001\002\000\004\030\033\001\002\000" +
    "\004\032\034\001\002\000\004\021\035\001\002\000\010" +
    "\006\ufffa\007\ufffa\027\ufffa\001\002\000\004\030\037\001" +
    "\002\000\004\033\040\001\002\000\004\021\041\001\002" +
    "\000\010\006\ufff9\007\ufff9\027\ufff9\001\002\000\004\026" +
    "\174\001\002\000\004\026\171\001\002\000\012\010\137" +
    "\016\135\017\136\027\uffff\001\002\000\010\010\046\016" +
    "\042\017\043\001\002\000\004\026\047\001\002\000\014" +
    "\011\060\012\055\013\062\014\061\015\057\001\002\000" +
    "\016\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\027\uffeb" +
    "\001\002\000\016\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\027\uffe9\001\002\000\016\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\027\uffea\001\002\000\016\011\060\012" +
    "\055\013\062\014\061\015\057\027\132\001\002\000\016" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\027\uffec\001" +
    "\002\000\004\022\114\001\002\000\016\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\027\uffed\001\002\000\004\022" +
    "\107\001\002\000\004\022\102\001\002\000\004\022\075" +
    "\001\002\000\004\022\063\001\002\000\004\024\064\001" +
    "\002\000\006\031\066\033\065\001\002\000\012\023\uffd2" +
    "\025\uffd2\031\uffd2\033\uffd2\001\002\000\012\023\uffd1\025" +
    "\uffd1\031\uffd1\033\uffd1\001\002\000\012\023\073\025\071" +
    "\031\072\033\070\001\002\000\012\023\uffd5\025\uffd5\031" +
    "\uffd5\033\uffd5\001\002\000\004\021\074\001\002\000\012" +
    "\023\uffd4\025\uffd4\031\uffd4\033\uffd4\001\002\000\012\023" +
    "\uffd3\025\uffd3\031\uffd3\033\uffd3\001\002\000\016\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\027\uffd6\001\002\000" +
    "\006\031\077\032\076\001\002\000\004\021\101\001\002" +
    "\000\004\021\100\001\002\000\016\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\027\uffd0\001\002\000\016\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\027\uffcf\001\002\000" +
    "\006\031\104\032\103\001\002\000\004\021\106\001\002" +
    "\000\004\021\105\001\002\000\020\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\020\uffde\027\uffde\001\002\000\020" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\020\uffdd\027" +
    "\uffdd\001\002\000\006\031\111\032\110\001\002\000\004" +
    "\021\113\001\002\000\004\021\112\001\002\000\016\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\027\uffce\001\002" +
    "\000\016\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\027" +
    "\uffcd\001\002\000\004\024\115\001\002\000\006\031\117" +
    "\032\116\001\002\000\012\023\uffd8\025\uffd8\031\uffd8\032" +
    "\uffd8\001\002\000\012\023\uffd7\025\uffd7\031\uffd7\032\uffd7" +
    "\001\002\000\012\023\124\025\121\031\123\032\122\001" +
    "\002\000\004\021\125\001\002\000\012\023\uffdb\025\uffdb" +
    "\031\uffdb\032\uffdb\001\002\000\012\023\uffda\025\uffda\031" +
    "\uffda\032\uffda\001\002\000\012\023\uffd9\025\uffd9\031\uffd9" +
    "\032\uffd9\001\002\000\016\011\uffdc\012\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\027\uffdc\001\002\000\016\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\027\ufff0\001\002\000\016\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\027\uffee\001\002" +
    "\000\016\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\027" +
    "\uffef\001\002\000\016\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\027\ufff1\001\002\000\012\010\ufff8\016\ufff8\017" +
    "\ufff8\027\ufff8\001\002\000\016\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\027\ufff2\001\002\000\012\010\137\016" +
    "\135\017\136\027\ufffd\001\002\000\004\026\160\001\002" +
    "\000\004\026\143\001\002\000\004\026\140\001\002\000" +
    "\014\011\060\012\055\013\062\014\061\015\057\001\002" +
    "\000\016\011\060\012\055\013\062\014\061\015\057\027" +
    "\142\001\002\000\012\010\ufff5\016\ufff5\017\ufff5\027\ufff5" +
    "\001\002\000\006\011\060\020\145\001\002\000\010\011" +
    "\uffe0\020\uffe0\027\uffe0\001\002\000\004\022\153\001\002" +
    "\000\010\011\uffdf\020\uffdf\027\uffdf\001\002\000\010\011" +
    "\060\020\145\027\152\001\002\000\010\011\uffe2\020\uffe2" +
    "\027\uffe2\001\002\000\010\011\uffe1\020\uffe1\027\uffe1\001" +
    "\002\000\012\010\ufff3\016\ufff3\017\ufff3\027\ufff3\001\002" +
    "\000\006\031\155\032\154\001\002\000\004\021\157\001" +
    "\002\000\004\021\156\001\002\000\010\011\uffcc\020\uffcc" +
    "\027\uffcc\001\002\000\010\011\uffcb\020\uffcb\027\uffcb\001" +
    "\002\000\010\011\060\012\055\013\062\001\002\000\012" +
    "\011\060\012\055\013\062\027\167\001\002\000\012\011" +
    "\uffe5\012\uffe5\013\uffe5\027\uffe5\001\002\000\012\011\uffe4" +
    "\012\uffe4\013\uffe4\027\uffe4\001\002\000\012\011\uffe3\012" +
    "\uffe3\013\uffe3\027\uffe3\001\002\000\012\011\uffe8\012\uffe8" +
    "\013\uffe8\027\uffe8\001\002\000\012\011\uffe7\012\uffe7\013" +
    "\uffe7\027\uffe7\001\002\000\012\010\ufff4\016\ufff4\017\ufff4" +
    "\027\ufff4\001\002\000\012\011\uffe6\012\uffe6\013\uffe6\027" +
    "\uffe6\001\002\000\006\011\060\020\145\001\002\000\010" +
    "\011\060\020\145\027\173\001\002\000\012\010\ufff6\016" +
    "\ufff6\017\ufff6\027\ufff6\001\002\000\010\011\060\012\055" +
    "\013\062\001\002\000\012\011\060\012\055\013\062\027" +
    "\176\001\002\000\012\010\ufff7\016\ufff7\017\ufff7\027\ufff7" +
    "\001\002\000\004\026\200\001\002\000\006\006\016\007" +
    "\015\001\002\000\010\006\031\007\030\027\202\001\002" +
    "\000\010\010\046\016\042\017\043\001\002\000\012\010" +
    "\137\016\135\017\136\027\ufffe\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\133\001\001\000\002\001\001" +
    "\000\016\004\055\007\052\013\051\014\050\020\053\021" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\132\013\127\014\126\020\130\021" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\055\007\140" +
    "\013\051\014\050\020\053\021\047\001\001\000\014\004" +
    "\132\013\127\014\126\020\130\021\125\001\001\000\002" +
    "\001\001\000\010\004\143\011\146\015\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\147\015\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\161\010\160\020\162\021\163\001\001\000\010" +
    "\004\164\020\165\021\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\143\011\171\015\145\001\001\000\006\004\147\015\150" +
    "\001\001\000\002\001\001\000\012\004\161\010\174\020" +
    "\162\021\163\001\001\000\010\004\164\020\165\021\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\200\001\001\000\002\001\001\000\004\006\202\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String Resulto = "";
    private Symbol s;
    public ArrayList<NodoVariable> ListaVariables = new ArrayList();
    public ArrayList<NodoGrafica> GraficasEjecutar = new ArrayList();
    public ArrayList<String> Ejes = new ArrayList();
    public ArrayList<String> valores = new ArrayList();
    public NodoGrafica graficabarras = new NodoGrafica();
    public NodoGrafica graficapie = new NodoGrafica();
    public NodoGrafica graficalineas = new NodoGrafica();

    public void error_sintax(Symbol s){
        this.s = s;
    }
    
    public Symbol getS(){
        return this.s;
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= BPGRE BPLLAIZQ contenidogeneral BPLLADER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // contenidogeneral ::= BPDEG BPLLAIZQ cuerpo BPLLADER graficas 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // contenidogeneral ::= BPCOMPARE BPDEG BPLLAIZQ cuerpo BPLLADER graficas 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // contenidogeneral ::= BPDEG BPLLAIZQ cuerpo BPLLADER BPCOMPARE graficas 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidogeneral",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= BPSTG IDENTIFICADOR BPEQUAL BPCADENA BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= BPDOUBLE IDENTIFICADOR BPEQUAL DD BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= cuerpo BPSTG IDENTIFICADOR BPEQUAL BPCADENA BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= cuerpo BPDOUBLE IDENTIFICADOR BPEQUAL DD BPPTCOMA 
            {
              ArrayList<NodoVariable> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ListaVariables.add(new NodoVariable(var1, var2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficas ::= BPGBARRAS BPLLAIZQ datosgraficabarra BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficabarras.tipo=var1;
                                                                GraficasEjecutar.add(graficabarras);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // graficas ::= BPGPIE BPLLAIZQ datosgraficapie BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficapie.tipo=var1;
                                                                GraficasEjecutar.add(graficapie);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // graficas ::= BPGLINEAS BPLLAIZQ datosgraficalineal BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficalineas.tipo=var1;
                                                                GraficasEjecutar.add(graficalineas);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // graficas ::= graficas BPGBARRAS BPLLAIZQ datosgraficabarra BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficabarras.tipo=var1;
                                                                           GraficasEjecutar.add(graficabarras);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // graficas ::= graficas BPGPIE BPLLAIZQ datosgraficapie BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficapie.tipo=var1;
                                                                GraficasEjecutar.add(graficapie);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // graficas ::= graficas BPGLINEAS BPLLAIZQ datosgraficalineal BPLLADER 
            {
              ArrayList<NodoGrafica> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		graficalineas.tipo=var1;
                                                                GraficasEjecutar.add(graficalineas);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("graficas",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // datosgraficabarra ::= datosgraficabarra titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // datosgraficabarra ::= datosgraficabarra ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // datosgraficabarra ::= datosgraficabarra valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // datosgraficabarra ::= datosgraficabarra titulox 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // datosgraficabarra ::= datosgraficabarra tituloy 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Tituloy=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datosgraficabarra ::= titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // datosgraficabarra ::= ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datosgraficabarra ::= valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datosgraficabarra ::= titulox 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datosgraficabarra ::= tituloy 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficabarras.Tituloy=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficabarra",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // datosgraficapie ::= datosgraficapie titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // datosgraficapie ::= datosgraficapie ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // datosgraficapie ::= datosgraficapie valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // datosgraficapie ::= titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // datosgraficapie ::= ejesx 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Ejes=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // datosgraficapie ::= valores 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<String> var1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficapie.Valores=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficapie",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // datosgraficalineal ::= datosgraficalineal titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // datosgraficalineal ::= datosgraficalineal Arch 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // datosgraficalineal ::= titulos 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.titulo=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // datosgraficalineal ::= Arch 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		graficalineas.Titulox=(String) var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("datosgraficalineal",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // titulos ::= BPTITULO BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // titulos ::= BPTITULO BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulos",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ejesx ::= BPEJEX BPDOSPUNTOS BPCORIZQ contenidox BPCORDER BPPTCOMA 
            {
              ArrayList<String> RESULT =null;
		RESULT=Ejes;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ejesx",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contenidox ::= contenidox BPCADENA 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contenidox ::= contenidox IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenidox ::= contenidox BPCOMA 
            {
              ArrayList<String> RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenidox ::= BPCADENA 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contenidox ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ejes.add(var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidox",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valores ::= BPVALORES BPDOSPUNTOS BPCORIZQ contenidov BPCORDER BPPTCOMA 
            {
              ArrayList<String> RESULT =null;
		RESULT=valores;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // contenidov ::= contenidov DD 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add((String) var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenidov ::= contenidov IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add( var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contenidov ::= contenidov BPCOMA 
            {
              ArrayList<String> RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenidov ::= DD 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add((String) var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenidov ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add( var1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidov",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // titulox ::= BPTTX BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // titulox ::= BPTTX BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("titulox",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tituloy ::= BPTTY BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tituloy ::= BPTTY BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tituloy",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Arch ::= BPARCHIVO BPDOSPUNTOS IDENTIFICADOR BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arch",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Arch ::= BPARCHIVO BPDOSPUNTOS BPCADENA BPPTCOMA 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String var1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=var1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Arch",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
